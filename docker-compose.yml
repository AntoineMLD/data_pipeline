services:
  postgres:
    image: postgres:16-alpine
    container_name: pipeline_postgres
    environment:
      POSTGRES_DB: taxi_data
      POSTGRES_USER: pipeline_user
      POSTGRES_PASSWORD: pipeline_pass
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pipeline_user -d taxi_data"]
      interval: 5s
      timeout: 5s
      retries: 5

  mongodb:
    image: mongo:7
    container_name: nyc-taxi-mongodb
    command: ["mongod", "--quiet", "--logpath", "/dev/null", "--logappend"]
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-admin}
      MONGO_INITDB_DATABASE: ${MONGO_DB:-nyc_taxi_clean}
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 5

  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: taxi_api
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    environment:
      USE_POSTGRES: "true"
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: taxi_data
      POSTGRES_USER: pipeline_user
      POSTGRES_PASSWORD: pipeline_pass
      MONGO_USER: ${MONGO_USER:-admin}
      MONGO_PASSWORD: ${MONGO_PASSWORD:-admin}
      MONGO_DB: ${MONGO_DB:-nyc_taxi_clean}
      MONGO_HOST: mongodb
      MONGO_PORT: 27017
      PYTHONPATH: /app:/app/src
    ports:
      - "8000:8000"
    volumes:
      - ./src:/app/src

volumes:
  postgres_data:
  mongodb_data:

